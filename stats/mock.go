// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redsift/go-stats/stats (interfaces: Collector)
//
// Generated by this command:
//
//	mockgen -package stats -destination stats/mock.go github.com/redsift/go-stats/stats Collector
//

// Package stats is a generated GoMock package.
package stats

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCollector is a mock of Collector interface.
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
}

// MockCollectorMockRecorder is the mock recorder for MockCollector.
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance.
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCollector) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCollectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCollector)(nil).Close))
}

// Count mocks base method.
func (m *MockCollector) Count(arg0 string, arg1 float64, arg2 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Count", varargs...)
}

// Count indicates an expected call of Count.
func (mr *MockCollectorMockRecorder) Count(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCollector)(nil).Count), varargs...)
}

// Error mocks base method.
func (m *MockCollector) Error(arg0 error, arg1 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockCollectorMockRecorder) Error(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockCollector)(nil).Error), varargs...)
}

// Gauge mocks base method.
func (m *MockCollector) Gauge(arg0 string, arg1 float64, arg2 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Gauge", varargs...)
}

// Gauge indicates an expected call of Gauge.
func (mr *MockCollectorMockRecorder) Gauge(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockCollector)(nil).Gauge), varargs...)
}

// Histogram mocks base method.
func (m *MockCollector) Histogram(arg0 string, arg1 float64, arg2 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Histogram", varargs...)
}

// Histogram indicates an expected call of Histogram.
func (mr *MockCollectorMockRecorder) Histogram(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockCollector)(nil).Histogram), varargs...)
}

// Inform mocks base method.
func (m *MockCollector) Inform(arg0, arg1 string, arg2 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Inform", varargs...)
}

// Inform indicates an expected call of Inform.
func (mr *MockCollectorMockRecorder) Inform(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inform", reflect.TypeOf((*MockCollector)(nil).Inform), varargs...)
}

// Tags mocks base method.
func (m *MockCollector) Tags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockCollectorMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockCollector)(nil).Tags))
}

// Timing mocks base method.
func (m *MockCollector) Timing(arg0 string, arg1 time.Duration, arg2 ...string) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Timing", varargs...)
}

// Timing indicates an expected call of Timing.
func (mr *MockCollectorMockRecorder) Timing(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*MockCollector)(nil).Timing), varargs...)
}

// With mocks base method.
func (m *MockCollector) With(arg0 ...string) Collector {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(Collector)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockCollectorMockRecorder) With(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockCollector)(nil).With), arg0...)
}
